version: '3.8'

services:
  # 前端服务
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "3000:80"
    environment:
      - NODE_ENV=production
    depends_on:
      - backend
    networks:
      - travel-planner-network

  # 后端服务
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - DB_HOST=database
      - DB_PORT=5432
      - DB_NAME=travel_planner
      - DB_USERNAME=${DB_USERNAME:-travel_user}
      - DB_PASSWORD=${DB_PASSWORD:-travel_password}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      # API密钥通过环境变量传入
      - AMAP_API_KEY=${AMAP_API_KEY}
      - XUNFEI_APP_ID=${XUNFEI_APP_ID}
      - XUNFEI_API_SECRET=${XUNFEI_API_SECRET}
      - XUNFEI_API_KEY=${XUNFEI_API_KEY}
      - ALIBABA_CLOUD_ACCESS_KEY_ID=${ALIBABA_CLOUD_ACCESS_KEY_ID}
      - ALIBABA_CLOUD_ACCESS_KEY_SECRET=${ALIBABA_CLOUD_ACCESS_KEY_SECRET}
    depends_on:
      - database
      - redis
    networks:
      - travel-planner-network
    volumes:
      - ./backend/logs:/app/logs

  # 数据库服务
  database:
    image: postgres:13-alpine
    environment:
      - POSTGRES_DB=travel_planner
      - POSTGRES_USER=${DB_USERNAME:-travel_user}
      - POSTGRES_PASSWORD=${DB_PASSWORD:-travel_password}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/sql/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - travel-planner-network

  # Redis缓存服务
  redis:
    image: redis:6-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - travel-planner-network
    command: redis-server --appendonly yes

  # Nginx反向代理 (生产环境)
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - frontend
      - backend
    networks:
      - travel-planner-network
    profiles:
      - production

volumes:
  postgres_data:
  redis_data:

networks:
  travel-planner-network:
    driver: bridge